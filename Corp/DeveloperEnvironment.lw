export
  type DeveloperEnvironment
  new

import Corp.InfoSecStandards as InfoSecStandards
import Corp.DeveloperEnvironmentConfig as DeveloperEnvironmentConfig
import Corp.Environment as Environment

import Fugue.AWS.AutoScaling as AutoScaling
import Fugue.AWS.EC2 as EC2
import Fugue.AWS.ELB as ELB
import Fugue.AWS.IAM as IAM
import Fugue.AWS as AWS

type DeveloperEnvironment:
  | DeveloperEnvironment
    elb: ELB.LoadBalancer
    asg: AutoScaling.AutoScalingGroup
    sgs: DeveloperEnvironmentSecurityGroups

type DeveloperEnvironmentSecurityGroups:
  elbSg: EC2.SecurityGroup
  asgSg: EC2.SecurityGroup
  clientSg: EC2.SecurityGroup

validate validateInstanceTypeStandard

fun validateInstanceTypeStandard(t: DeveloperEnvironment) -> Validation:
  let lc: t.DeveloperEnvironment.asg.(AutoScaling.AutoScalingGroup).launchConfiguration
  let instanceType: lc.(AutoScaling.LaunchConfiguration).instanceType
  case instanceType of
    | EC2.T2_micro  -> Validation.success
    | EC2.T2_small  -> Validation.success
    | EC2.T2_medium -> Validation.success
    | _ -> Validation.failure("Failed Compliance Validation: Must be a valid EC2 instance type. Please see InfoSec.")

fun amiForRegion(region: AWS.Region) -> String:
  case region of
    | AWS.Ap-northeast-1 -> "ami-6fccbe08"
    | AWS.Ap-southeast-1 -> "ami-50e64d33"
    | AWS.Ap-southeast-2 -> "ami-799d981a"
    | AWS.Eu-central-1   -> "ami-78559817"
    | AWS.Eu-west-1      -> "ami-a192bad2"
    | AWS.Sa-east-1      -> "ami-ff861c93"
    | AWS.Us-east-1      -> "ami-49c9295f"
    | AWS.Us-west-1      -> "ami-3e21725e"
    | AWS.Us-west-2      -> "ami-5e63d13e"
    | _                  -> error("Region is not supported")
    # Ubuntu 14.04 (trusty) amd64 hvm:ebs-ssd
    # From https://cloud-images.ubuntu.com/locator/ec2/

fun makeDeveloperEnvironmentSgs {
      name: String,
      vpc: EC2.Vpc,
      extraTags: List<AWS.Tag>
    } -> DeveloperEnvironmentSecurityGroups:
  let elbSg: EC2.SecurityGroup.new {
    description: name ++ "-elb-sg",
    ipPermissions: [
      EC2.IpPermission.http(EC2.IpPermission.Target.all),
      EC2.IpPermission.https(EC2.IpPermission.Target.all),
    ],
    tags: List.concat([AWS.tag("Name", name ++ "-elb-sg")], extraTags),
    vpc: vpc,
  }
  let asgSg: EC2.SecurityGroup.new {
    description: name ++ "-asg-sg",
    ipPermissions: makeAsgRules(elbSg, clientSg),
    tags: List.concat([AWS.tag("Name", name ++ "-asg-sg")], extraTags),
    vpc: vpc,
  }
  let clientSg: EC2.SecurityGroup.new {
    description: name ++ "-client-sg",
    ipPermissions: [],
    tags: List.concat([AWS.tag("Name", name ++ "-client-sg")], extraTags),
    vpc: vpc,
  }
  {
    elbSg: elbSg,
    asgSg: asgSg,
    clientSg: clientSg,
  }

fun makeAsgRules(elbSg: EC2.SecurityGroup, clientSg: EC2.SecurityGroup) -> List<EC2.IpPermission>:
  let rules: [
    EC2.IpPermission.http(EC2.IpPermission.Target.securityGroup(elbSg)),
    EC2.IpPermission.https(EC2.IpPermission.Target.securityGroup(elbSg)),
  ]
  if InfoSecStandards.isApprovedEnvironment() then
    let sshAccess: [
      EC2.IpPermission.ssh(EC2.IpPermission.Target.securityGroup(clientSg)),
      EC2.IpPermission.ssh(EC2.IpPermission.Target.all),
    ]
    List.concat(rules, sshAccess)
  else rules

fun new {
      name: String,
      subnets: List<EC2.Subnet>,
      keyName: Optional<String>,
      image: Optional<String>,
      instanceType: Optional<EC2.InstanceType>,
      managementSgs: Optional<List<EC2.SecurityGroup>>,
      tags: Optional<List<AWS.Tag>>
    } -> DeveloperEnvironment:
  let _vpc: List.elementAt(0, subnets).(EC2.Subnet).vpc
  let _region: _vpc.(EC2.Vpc).region
  let _branchName:
    String.join("-", 
      String.split("/", 
        Optional.unpack("", String.getEnv("BRANCH_NAME"))))
  let _keyName:       Optional.unpack(name, keyName)
  let _image:         Optional.unpack(amiForRegion(_region), image)
  let _instanceType:  Optional.unpack(EC2.T2_micro, instanceType)
  let _managementSgs: Optional.unpack([], managementSgs)
  let _extraTags:     Optional.unpack([], tags)

  let sgs: makeDeveloperEnvironmentSgs {
    name: name,
    vpc: _vpc,
    extraTags: _extraTags,
  }

  let policyName:
    if _branchName == "" then
      "policy"
    else
      _branchName ++ "-policy"
  let policy: IAM.Policy.new {
    policyName: policyName,
    policyDocument: '{
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "*",
          "Resource": "*"
        }
      ]
    }',
  }
  let roleName:
    if _branchName == "" then
      "role"
    else
      _branchName ++ "-role"
  let role: IAM.Role.new {
    roleName: roleName,
    rolePolicies: [policy],
    assumeRolePolicyDocument: IAM.Policy.AssumeRole.ec2,
  }
  let profileName:
    if _branchName == "" then
      "profile"
    else
      _branchName ++ "-profile"
  let profile: IAM.InstanceProfile.new {
    instanceProfileName: profileName,
    roles: [role],
  }

  let elbName:
    if _branchName == "" then
      "elb"
    else
      _branchName ++ "-elb"
  let elb: ELB.LoadBalancer.new {
    loadBalancerName: elbName,
    listeners: [
      ELB.Listener.new {
        protocol: ELB.TCP,
        loadBalancerPort: 80,
        instancePort: 80,
        instanceProtocol: ELB.TCP,
      },
      ELB.Listener.new {
        protocol: ELB.TCP,
        loadBalancerPort: 443,
        instancePort: 443,
        instanceProtocol: ELB.TCP,
      }
    ],
    healthCheck: ELB.HealthCheck.tcp {
      port: 80,
      interval: 5,
      timeout: 2,
      unhealthyThreshold: 2,
      healthyThreshold: 2,
    },
    subnets: subnets,
    securityGroups: [sgs.elbSg],
    tags: List.concat([AWS.tag("Name", elbName)], _extraTags),
  }

  let lc: AutoScaling.LaunchConfiguration.new {
    image: _image,
    securityGroups: List.concat([sgs.asgSg], _managementSgs),
    keyName: _keyName,
    instanceType: _instanceType,
    associatePublicIpAddress: True,
    iamInstanceProfile: profile,
    userData: DeveloperEnvironmentConfig.new(), 
    blockDeviceMappings: [
      EC2.InstanceBlockDeviceMapping.new {
        deviceName: "/dev/sda1",
        ebs: EC2.EbsInstanceBlockDevice.new {
          volume: EC2.Volume.new {
            volumeType: EC2.Standard,
            size: 10,
            availabilityZone: AWS.A,
            tags: List.concat([AWS.tag("Name", name)], _extraTags),
          },
          deleteOnTermination: True,
        },
      }
    ],
  }
  let asg: AutoScaling.AutoScalingGroup.new {
    subnets: subnets,
    loadBalancers: [elb],
    minSize: 1,
    maxSize: 2,
    defaultCooldown: 300,
    healthCheckType: AutoScaling.Ec2,
    launchConfiguration: lc,
    tags: List.concat([AWS.tag("Name", name)], _extraTags),
    terminationPolicies: [AutoScaling.ClosestToNextInstanceHour],
    enabledMetrics: [
      AutoScaling.GroupInServiceInstances,
      AutoScaling.GroupTotalInstances,
    ]
  }
  DeveloperEnvironment {
    elb: elb,
    asg: asg,
    sgs: sgs,
  }
